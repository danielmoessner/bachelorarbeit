
% Papers from SoSy Group without Dirk

%% Publication web page is generated from this file.


% The 'keyword' field contains always the basic research interest,
%   which the paper falls into, must be one of the following:
%   - Interfaces for Component-Based Design
%   - Software Model Checking
%   - Structural Analysis and Comprehension
%   - Formal Verification of Real-Time Systems


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 2020


@Article{PRTEST19,
  author    = {Thomas Lemberger},
  title     = {Plain random test generation with {PRTest}},
  journal   = {International Journal on Software Tools for Technology Transfer (STTT)},
  volume    = {},
  number    = {},
  pages     = {},
  year      = {2020},
  publisher = {Springer},
  doi       = {10.1007/s10009-020-00568-x},
  pdf       = {https://www.sosy-lab.org/research/pub/2020-STTT.Plain_random_test_generation_with_PRTest.pdf},
  postscript= {https://www.sosy-lab.org/research/prs/2019-04-06_TestComp19_PRTest_Thomas.pdf},
  abstract  = {Automatic test-suite generation tools are often complex and their behavior is not predictable.
               To provide a minimum baseline that test-suite generators should be able to surpass,
               we present PRTest, a random black-box test-suite generator for C programs:
               To create a test, PRTest natively executes the program under test
               and creates a new, random test value whenever an input value is required.
               After execution, PRTest checks whether any new program branches were covered and,
               if this is the case, the created test is added to the test suite.
               This way, tests are rapidly created either until a crash is found,
               or until the user aborts the creation.
               While this naive mechanism is not competitive with more sophisticated,
               state-of-the-art test-suite generation tools, it is able to provide a good baseline for Test-Comp
               and a fast alternative for automatic test-suite generation for programs with simple control flow.
               PRTest is publicly available and open source.
  },
  keyword   = {Software Testing},
  annote    = {DOI: <a href="https://doi.org/10.1007/s10009-020-00568-x">https://doi.org/10.1007/s10009-020-00568-x</a><BR/>
               Publication appeared first online in July 2020.<BR/>
               PRTest is available at:
               <a href="https://gitlab.com/sosy-lab/software/prtest">
               https://gitlab.com/sosy-lab/software/prtest</a>},
               },
}


%% 2019

@inproceedings{DaLi19,
  author    = {Rolf Hennicker and Alexander Knapp and Alexandre Madeira and Felix Mindt},
  title     = {Behavioural and Abstractor Specifications for a Dynamic Logic with Binders and Silent Transitions},
  booktitle = {Proceedings of the International Workshop on Data Learning and Inference (DALI~2019, San Sebastian, Spain, September 03-06)},
  series    = {{LCNS}},
  publisher = {Springer},
  note      = {(to appear)},
  year      = {2019},
  pdf       = {https://www.sosy-lab.org/research/pub/2019-DALI.Behavioural_and_Abstractor_Specifications_for_a_Dynamic_Logic_with_Binders_and_Silent_Transitions.pdf},
  abstract  = {We extend dynamic logic with binders (for state variables)
    by distinguishing between observable and silent transitions. This differentiation
    gives rise to two kinds of observational interpretations of the logic:
    abstractor and behavioural specifications. Abstractor specifications relax
    the standard model class semantics of a specification by considering its
    closure under weak bisimulation. Behavioural specifications, however, rely
    on a behavioural satisfaction relation which relaxes the interpretation of
    state variables and the satisfaction of modal formulas &lang;&alpha;&rang;&phi; and [&alpha;]&phi; by
    abstracting from silent transitions. A formal relation between abstractor
    and behavioural specifications is provided which shows that both coincide
    semantically under mild conditions. For the proof we instantiate the
    previously introduced concept of a behaviour-abstractor framework to
    the case of dynamic logic with binders and silent transitions.
  },
}

@incollection{DissZusammenfassungJakobs,
  author    = {Marie-Christine Jakobs},
  title     = {Spontane Sicherheitspr{\"{u}}fung mittels individualisierter Programmzertifizierung oder Programmrestrukturierung},
  booktitle = {Ausgezeichnete Informatikdissertationen 2017},
  editor    = {S. H{\"{o}}lldobler},
  pages     = {91-100},
  series    = {{LNI}},
  volume    = {{D-18}},
  publisher = {Gesellschaft f{\"{u}}r Informatik ({GI})},
  year      = {2018},
  isbn      = {978-3885799771},
  doi       = {20.500.12116/19486},
  keyword   = {CPAchecker,Software Model Checking},
  pdf       = {https://dl.gi.de/bitstream/handle/20.500.12116/19486/invited_paper_14.pdf?sequence=1&isAllowed=y},
  annote    = {This is a German summary of the dissertation On-The-Fly Safety Checking - Customizing Program Certification and Program Restructuring.},
  abstract  = {
    Korrekt funktionierende Software gewinnt immer mehr an Bedeutung.
    Im Vergleich zu fr&uuml;her ist es heutzutage schwieriger einzusch&auml;tzen, wie gut eine Software funktioniert.
    Dies liegt unter anderem daran, dass Endnutzer h&auml;ufiger Software unbekannter Hersteller installieren.
    Endnutzer sollten sich also aktiv von der Softwarekorrektheit &uuml;berzeugen,
    zum Beispiel in Form einer spontanen Sicherheitspr&uuml;fung.
    &Uuml;bliche Verifikationstechniken zur Korrektheitspr&uuml;fung kommen f&uuml;r Endnutzer, in der Regel Laien, nicht in Frage.
    Die zentrale Frage ist daher, wie man einem Laien eine solche spontane Sicherheitspr&uuml;fung erm&ouml;glicht.
    Die Antwort der Dissertation sind einfache, automatische und generelle Verfahren zur Sicherheitspr&uuml;fung.
    In der Dissertation werden verschiedene Verfahren vorgeschlagen und sowohl theoretisch als auch praktisch untersucht.
    Die vorgeschlagenen Verfahren lassen sich in zwei Forschungsrichtungen einsortieren,
    n&auml;mlich in die Gruppe der Proof-Carrying Code Verfahren
    bzw. in die Gruppe des alternativen Programs from Proofs Verfahren.
    Einige Verfahren kombinieren beide Forschungsrichtungen.
  },
}

@incollection{DissZusammenfassungWendler,
  author    = {Philipp Wendler},
  title     = {Beitr{\"{a}}ge zu praktikabler Pr{\"{a}}dikatenanalyse},
  booktitle = {Ausgezeichnete Informatikdissertationen 2017},
  editor    = {S. H{\"{o}}lldobler},
  pages     = {261-270},
  series    = {{LNI}},
  volume    = {{D-18}},
  publisher = {Gesellschaft f{\"{u}}r Informatik ({GI})},
  year      = {2018},
  isbn      = {978-3885799771},
  doi       = {20.500.12116/19476},
  keyword   = {Benchmarking,CPAchecker,Software Model Checking},
  pdf       = {https://dl.gi.de/bitstream/handle/20.500.12116/19476/invited_paper_4.pdf?sequence=1&isAllowed=y},
  url       = {https://www.sosy-lab.org/research/phd/wendler/},
  postscript= {https://www.sosy-lab.org/research/prs/2018-05-08_GiDiss_BeitraegeZuPraktikablerPraedikatenanalyse.pdf},
  annote    = {This is a German summary of the dissertation <a href="https://www.sosy-lab.org/research/bib/Year/2017.complete.html#PhilippPredicateAnalysis">Towards Practical Predicate Analysis</a>.},
  abstract  = {
    Der Stand der Forschung im Bereich der automatischen Software-Verifikation ist fragmentiert.
    Verschiedene Verfahren existieren nebeneinander in unterschiedlichen Darstellungen
    und mit wenig Bezug zueinander, aussagekr&auml;ftige Vergleiche sind selten.
    Die Dissertation adressiert dieses Problem.
    Ein konfigurierbares und flexibles Rahmenwerk
    zur Vereinheitlichung solcher Verfahren wird entwickelt
    und mehrere vorhandene Verfahren werden in diesem Rahmenwerk ausgedr&uuml;ckt.
    Dies bringt neue Erkenntnisse &uuml;ber die Kernideen dieser Verfahren,
    erm&ouml;glicht experimentelle Studien in einer neuartigen Qualit&auml;t,
    und erleichtert die Forschung an Kombinationen und Weiterentwicklungen dieser Verfahren.
    Die Implementierung dieses Rahmenwerks im erfolgreichen Verifizierer CPAchecker
    wird in der bisher gr&ouml;&szlig;ten derartigen experimentellen Studie
    (120 verschiedene Konfigurationen, 671280 Ausf&uuml;hrungen) evaluiert.
    Hierzu wird ein Benchmarking-System pr&auml;sentiert,
    das mit Hilfe moderner Technologien signifikante qualitative Messfehler
    existierender Systeme vermeidet.
  },
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 2017

@inproceedings{CPABAM-COMP17,
  author    = {Pavel Andrianov and Karlheinz Friedberger and Mikhail U. Mandrykin and Vadim S. Mutilin and Anton Volkov},
  title     = {{CPA-BAM-BnB}: {Block}-Abstraction Memoization and Region-Based Memory Models for Predicate Abstractions (Competition Contribution)},
  booktitle = {Proceedings of the 23rd International Conference on
                 Tools and Algorithms for the Construction and Analysis of Systems (TACAS~2017, Uppsala, Sweden, April 22-29)},
  editor    = {Axel Legay and Tiziana Margaria},
  series    = {LNCS~10206},
  pages     = {355--359},
  year      = {2017},
  publisher = {Springer-Verlag, Heidelberg},
  isbn      = {978-3-662-54579-9},
  url       = {https://doi.org/10.1007/978-3-662-54580-5_22},
  doi       = {10.1007/978-3-662-54580-5_22},
  keyword   = {CPAchecker,Competition on Software Verification (SV-COMP),Software Model Checking},
  abstract  = {
    Our submission to SV-COMP'17 is based on the software verification framework CPAchecker.
    Combined with value analysis and predicate analysis
    we use the concept of block-abstraction memoization
    with optimization and several fixes relative to the version of SV-COMP'16.
    A novelty of our approach is usage of BnB memory model for predicate analysis,
    which efficiently divides the accessed memory into memory regions and thus leads to smaller formulas.
  },
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 2016

@inproceedings{LPI,
  author    = {Egor George Karpenkov and
               David Monniaux and
               Philipp Wendler},
  title     = {Program Analysis with Local Policy Iteration},
  booktitle = {Proceedings of the 17th International Conference on Verification, Model Checking, and Abstract Interpretation (VMCAI~2016, St.~Petersburg, FL, USA, January 17-19)},
  pages     = {127--146},
  year      = {2016},
  series    = {LNCS~9583},
  keyword   = {CPAchecker,Software Model Checking},
  publisher = {Springer-Verlag, Heidelberg},
  doi       = {10.1007/978-3-662-49122-5_6},
  pdf       = {https://arxiv.org/pdf/1509.03424},
  url       = {http://lpi.metaworld.me},
  abstract  = {
    We present local policy iteration (LPI),
    a new algorithm for deriving numerical invariants
    that combines the precision of max-policy iteration with the flexibility
    and scalability of conventional Kleene iterations.
    It is defined in the Configurable Program Analysis (CPA)
    framework, thus allowing inter-analysis communication.

    LPI uses adjustable-block encoding in order to traverse loop-free program sections,
    possibly containing branching, without introducing extra abstraction.
    Our technique operates over any template linear constraint domain,
    including the interval and octagon domains;
    templates can also be derived from the program source.

    The implementation is evaluated on a set of benchmarks from
    the International Competition on Software Verification (SV-COMP).
    It competes favorably with state-of-the-art analyzers.
  },
}

@inproceedings{CPABAM-COMP16,
  author    = {Karlheinz Friedberger},
  title     = {{CPA-BAM}: Block-Abstraction Memoization with Value Analysis and Predicate Analysis (Competition Contribution)},
  booktitle = {Proceedings of the 22nd International Conference on
                 Tools and Algorithms for the Construction and Analysis of Systems (TACAS~2016, Eindhoven, The Netherlands, April 2-8)},
  editor    = {Marsha Chechik and Jean{-}Fran{\c{c}}ois Raskin},
  series    = {LNCS~9636},
  pages     = {912--915},
  year      = {2016},
  publisher = {Springer-Verlag, Heidelberg},
  keyword   = {CPAchecker,Competition on Software Verification (SV-COMP),Software Model Checking},
  isbn      = {978-3-662-49673-2},
  url       = {https://doi.org/10.1007/978-3-662-49674-9_58},
  doi       = {10.1007/978-3-662-49674-9_58},
}

@inproceedings{CPAREFSEL-COMP16,
  author    = {Stefan L{\"{o}}we},
  title     = {{CPA-RefSel}: {{\sc CPAchecker}} with Refinement Selection (Competition Contribution)},
  booktitle = {Proceedings of the 22nd International Conference on
                 Tools and Algorithms for the Construction and Analysis of Systems (TACAS~2016, Eindhoven, The Netherlands, April 2-8)},
  editor    = {Marsha Chechik and Jean{-}Fran{\c{c}}ois Raskin},
  series    = {LNCS~9636},
  pages     = {916--919},
  year      = {2016},
  publisher = {Springer-Verlag, Heidelberg},
  keyword   = {CPAchecker,Competition on Software Verification (SV-COMP),Software Model Checking},
  isbn      = {978-3-662-49673-2},
  url       = {https://doi.org/10.1007/978-3-662-49674-9_59},
  doi       = {10.1007/978-3-662-49674-9_59},
  annote    = {Won category DeviceDriversLinux64 in <span style="white-space: nowrap"><a href="https://sv-comp.sosy-lab.org/2016/">SV-COMP'16</a></span>},
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 2015

@inproceedings{CPACHECKER-COMP15,
  author    = {Matthias Dangl and
               Stefan L{\"{o}}we and
               Philipp Wendler},
  title     = {{{\sc CPAchecker}} with Support for Recursive Programs and Floating-Point Arithmetic (Competition Contribution)},
  booktitle = {Proceedings of the 21st International Conference on
                 Tools and Algorithms for the Construction and Analysis of Systems (TACAS~2015, London, UK, April 13-17)},
  editor =    {C.~Baier and C.~Tinelli},
  series    = {LNCS~9035},
  pages     = {423--425},
  year      = {2015},
  publisher = {Springer-Verlag, Heidelberg},
  keyword   = {CPAchecker,Competition on Software Verification (SV-COMP),Software Model Checking},
  isbn =      {978-3-662-46680-3},
  url       = {https://doi.org/10.1007/978-3-662-46681-0_34},
  doi       = {10.1007/978-3-662-46681-0_34},
  pdf       = {https://www.sosy-lab.org/research/pub/2015-TACAS.CPAchecker_with_Support_for_Recursive_Programs_and_Floating-Point_Arithmetic.pdf},
  annote    = {Won categories ControlFlow, MemorySafety, and Overall, and received three silver and two bronze medals in <span style="white-space: nowrap"><a href="https://sv-comp.sosy-lab.org/2015/">SV-COMP'15</a></span>},
  abstract  = {
    We submit to SV-COMP'15 the software-verification framework CPAchecker.
    The submitted configuration is
    a combination of seven different analyses,
    based on explicit-value analysis, k-induction,
    predicate analysis, and concrete memory graphs.
    These analyses use concepts
    such as CEGAR, lazy abstraction,
    interpolation, adjustable-block encoding,
    bounded model checking, invariant generation,
    and block-abstraction memoization.
    Found counterexamples are cross-checked
    by a bit-precise analysis.
    The combination of several different analyses
    copes well with the diversity of the verification tasks in SV-COMP.
  },
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 2014

@inproceedings{CPACHECKER-COMP14,
  author    = {Stefan~L{\"{o}}we and Mikhail~U.~Mandrykin and Philipp~Wendler},
  title     = {{{\sc CPAchecker}} with Sequential Combination of 
               Explicit-Value Analyses and Predicate Analyses (Competition Contribution)},
  booktitle = {Proceedings of the 20th International Conference on
                  Tools and Algorithms for the Construction and Analysis of Systems (TACAS~2014, Grenoble, France, April 5-13)},
  editor    = {E.~Abraham and K. Havelund},
  series    = {LNCS~8413},
  year      = {2014},
  pages     = {392-394},
  publisher = {Springer-Verlag, Heidelberg},
  keyword   = {CPAchecker,Competition on Software Verification (SV-COMP),Software Model Checking},
  isbn      = {978-3-642-54861-1},
  url       = {https://doi.org/10.1007/978-3-642-54862-8_27},
  doi       = {10.1007/978-3-642-54862-8_27},
  pdf       = {https://www.sosy-lab.org/research/pub/2014-TACAS.CPAchecker_with_Sequential_Combination_of_Explicit-Value_Analyses_and_Predicate_Analyses.pdf},
  annote    = {Won categories ControlFlow, MemorySafety, and Simple, and received one silver and one bronze medal in <span style="white-space: nowrap"><a href="https://sv-comp.sosy-lab.org/2014/">SV-COMP'14</a></span>},
  abstract  = {
    CPAchecker is a framework for software verification,
    built on the foundations of configurable program analysis (CPA).
    For the SV-COMP'14,
    we file a CPAchecker configuration that runs
    up to five analyses in sequence.
    The first two analyses of our approach
    utilize the explicit-value domain for modeling the state space,
    while the remaining analyses are based on predicate abstraction.
    In addition to that, a bit-precise counterexample checker
    comes into action whenever an analysis finds a counterexample.
    The combination of conceptually different analyses
    is key to the success of our verification approach,
    as the diversity of verification tasks is taken into account.
  },
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 2013

@inproceedings{CPACHECKERSEQCOM-COMP13,
  author    = {Philipp Wendler},
  title     = {{{\sc CPAchecker}} with Sequential Combination of 
               Explicit-State Analysis and Predicate Analysis (Competition Contribution)},
  booktitle = {Proceedings of the 19th International Conference on
                  Tools and Algorithms for the Construction and Analysis of Systems (TACAS~2013, Rome, Italy, March 16-24)},
  editor    = {N.~Piterman and S.~Smolka},
  series    = {LNCS~7795},
  year      = {2013},
  pages     = {613-615},
  publisher = {Springer-Verlag, Heidelberg},
  keyword   = {CPAchecker,Competition on Software Verification (SV-COMP),Software Model Checking},
  isbn      = {978-3-642-36741-0},
  url       = {https://doi.org/10.1007/978-3-642-36742-7_45},
  doi       = {10.1007/978-3-642-36742-7_45},
  pdf       = {https://www.sosy-lab.org/research/pub/2013-TACAS.CPAchecker_with_Sequential_Combination_of_Explicit-State_Analysis_and_Predicate_Analysis.pdf},
  annote    = {Won category Overall and received five bronze medals in <span style="white-space: nowrap"><a href="https://sv-comp.sosy-lab.org/2013/">SV-COMP'13</a></span>},
  abstract  = {
    CPAchecker is an open-source framework for software verification,
    based on the concepts of configurable program analysis (CPA).
    We submit a CPAchecker configuration that uses
    a sequential combination of two approaches.
    It starts with an explicit-state analysis,
    and, if no answer can be found within some time,
    switches to a predicate analysis
    with adjustable-block encoding and CEGAR.
  },
}

@inproceedings{CPACHECKEREXPLICIT-COMP13,
  author    = {Stefan L{\"{o}}we},
  title     = {{{\sc CPAchecker}} with Explicit-Value Analysis
               Based on {CEGAR} and Interpolation (Competition Contribution)},
  booktitle = {Proceedings of the 19th International Conference on
                  Tools and Algorithms for the Construction and Analysis of Systems (TACAS~2013, Rome, Italy, March 16-24)},
  editor    = {N.~Piterman and S.~Smolka},
  series    = {LNCS~7795},
  year      = {2013},
  pages     = {610-612},
  publisher = {Springer},
  keyword   = {CPAchecker,Competition on Software Verification (SV-COMP),Software Model Checking},
  isbn      = {978-3-642-36741-0},
  url       = {https://doi.org/10.1007/978-3-642-36742-7_44},
  doi       = {10.1007/978-3-642-36742-7_44},
  annote    = {Received four silver medals in <span style="white-space: nowrap"><a href="https://sv-comp.sosy-lab.org/2013/">SV-COMP'13</a></span>},
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 2012

@inproceedings{CPACHECKERABE-COMP12,
  author    = {Stefan L{\"{o}}we and Philipp Wendler},
  title     = {{{\sc CPAchecker}} with Adjustable Predicate Analysis (Competition Contribution)},
  booktitle = {Proceedings of the 18th International Conference on
                  Tools and Algorithms for the Construction and Analysis of Systems (TACAS~2012, Tallinn, Estonia, March 27-30)},
  editor    = {C.~Flanagan and B.~K{\"o}nig},
  series    = {LNCS~7214},
  pages     = {528--530},
  year      = {2012},
  publisher = {Springer-Verlag, Heidelberg},
  keyword   = {CPAchecker,Competition on Software Verification (SV-COMP),Software Model Checking},
  url       = {https://doi.org/10.1007/978-3-642-28756-5_40},
  doi       = {10.1007/978-3-642-28756-5_40},
  pdf       = {https://www.sosy-lab.org/research/pub/2012-TACAS.CPAchecker_with_Adjustable_Predicate_Analysis.pdf},
  annote    = {Won category ControlFlowInteger and received one silver and two bronze medals in <span style="white-space: nowrap"><a href="https://sv-comp.sosy-lab.org/2012/">SV-COMP'12</a></span>},
  abstract  = {
    CPAchecker is a freely available software-verification framework,
    built on the concepts of configurable program analysis (CPA).
    CPAchecker integrates most of the state-of-the-art technologies for software model checking,
    such as counterexample-guided abstraction refinement (CEGAR),
    lazy predicate abstraction, interpolation-based refinement, and large-block encoding.
    The CPA for predicate analysis with adjustable-block encoding (ABE)
    is very promising in many categories,
    and thus, we submit a CPAchecker configuration that uses this analysis approach to the competition.
  },
}


